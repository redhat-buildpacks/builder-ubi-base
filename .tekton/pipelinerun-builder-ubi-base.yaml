apiVersion: "tekton.dev/v1"
kind: "PipelineRun"
metadata:
  annotations:
    build.appstudio.redhat.com/target_branch: "{{target_branch}}"
    build.appstudio.redhat.com/commit_sha: "{{revision}}"
    pipelinesascode.tekton.dev/on-cel-expression: "event == 'push' && target_branch\
      \ == 'main'"
    pipelinesascode.tekton.dev/max-keep-runs: "3"
    build.appstudio.openshift.io/repo: "https://github.com/redhat-buildpacks/builder-ubi-base?rev={{revision}}"
  labels:
    appstudio.openshift.io/application: "buildpack-remote"
    pipelines.appstudio.openshift.io/type: "build"
    pipelines.openshift.io/strategy: "remote-build"
    appstudio.openshift.io/component: "builder-ubi-base"
    pipelines.openshift.io/used-by: "build-cloud"
    pipelines.openshift.io/runtime: "java"
  name: "builder-ubi-base"
  namespace: "cmoullia-tenant"
spec:
  params:
  - name: "git-url"
    value: "{{source_url}}"
  - name: "revision"
    value: "{{revision}}"
  - name: "image-expires-after"
    value: "5d"
  - name: "build-image-index"
    value: ""
  - name: "build-source-image"
    value: "false"
  - name: "prefetch-input"
    value: ""
  - name: "output-image"
    value: "quay.io/redhat-user-workloads/cmoullia-tenant/buildpack-remote/builder-ubi-base:{{revision}}"
  pipelineSpec:
    finally:
    - name: "show-sbom"
      params:
      - name: "IMAGE_URL"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-show-sbom:0.1"
        - name: "name"
          value: "show-sbom"
        - name: "kind"
          value: "task"
        resolver: "bundles"
    - name: "summary"
      params:
      - name: "pipelinerun-name"
        value: "$(context.pipelineRun.name)"
      - name: "git-url"
        value: "$(tasks.git-clone.results.url)?rev=$(tasks.git-clone.results.commit)"
      - name: "image-url"
        value: "$(params.output-image)"
      - name: "build-task-status"
        value: "$(tasks.build-container.status)"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-summary:0.2"
        - name: "name"
          value: "summary"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "workspace"
        workspace: "workspace"
    results:
    - name: "IMAGE_URL"
      value: "$(tasks.build-container.results.IMAGE_URL)"
    - name: "IMAGE_DIGEST"
      value: "$(tasks.build-container.results.IMAGE_DIGEST)"
    - name: "BASE_IMAGES_DIGESTS"
      value: "$(tasks.build-container.results.BASE_IMAGES_DIGESTS)"
    - name: "CHAINS-GIT_URL"
      value: "$(tasks.git-clone.results.url)"
    - name: "CHAINS-GIT_COMMIT"
      value: "$(tasks.git-clone.results.commit)"
    tasks:
    - name: "init"
      params:
      - name: "image-url"
        value: "$(params.output-image)"
      - name: "rebuild"
        value: "$(params.rebuild)"
      - name: "skip-checks"
        value: "$(params.skip-checks)"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-init:0.2"
        - name: "name"
          value: "init"
        - name: "kind"
          value: "task"
        resolver: "bundles"
    - name: "git-clone"
      params:
      - name: "url"
        value: "$(params.git-url)"
      runAfter:
      - "init"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-git-clone:0.1"
        - name: "name"
          value: "git-clone"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "output"
        workspace: "workspace"
      - name: "basic-auth"
        workspace: "git-auth"
    - name: "prefetch-dependencies"
      params:
      - name: "input"
        value: "$(params.prefetch-input)"
      runAfter:
      - "git-clone"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-prefetch-dependencies:0.1"
        - name: "name"
          value: "prefetch-dependencies"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "source"
        workspace: "workspace"
      - name: "git-basic-auth"
        workspace: "git-auth"
    - name: "build-container"
      params:
      - name: "PLATFORM"
        value: "linux-mlarge/amd64"
      - name: "BUILDER_IMAGE"
        value: "quay.io/redhat-user-workloads/konflux-build-pipeli-tenant/paketo-container:ea8ddb8818bb4a55546927e7674b0362dabd6342"
      - name: "REPOSITORY_TO_FETCH"
        value: "https://github.com/redhat-buildpacks/builder-ubi-base"
      - name: "BUILD_ARGS"
        value:
        - "-v"
      runAfter:
      - "prefetch-dependencies"
      taskSpec:
        results:
        - description: "Image repository and tag where the built image was pushed"
          name: "IMAGE_URL"
        - description: "Digest of the image just built"
          name: "IMAGE_DIGEST"
        - description: "Image reference of the built image"
          name: "IMAGE_REF"
        - description: "Digests of the base images used for build"
          name: "BASE_IMAGES_DIGESTS"
        - description: "SBOM Image URL"
          name: "SBOM_BLOB_URL"
        stepTemplate:
          env:
          - name: "BUILDER_IMAGE"
            value: "$(params.BUILDER_IMAGE)"
          - name: "PLATFORM"
            value: "$(params.PLATFORM)"
          - name: "REPOSITORY_TO_FETCH"
            value: "$(params.REPOSITORY_TO_FETCH)"
          - name: "IMAGE"
            value: "$(params.output-image)"
        steps:
        - args:
          - "$(params.BUILD_ARGS[*])"
          image: "quay.io/konflux-ci/buildah-task:latest@sha256:860a239c5f25376a435a514ae6d53a5c75b1fa492461d17774e9b7cb32d1e275"
          #image: quay.io/redhat-user-workloads/konflux-build-pipeli-tenant/paketo-container:ea8ddb8818bb4a55546927e7674b0362dabd6342
          name: "run-script"
          script: |-
            #!/usr/bin/env bash
            set -eu
            set -o pipefail

            echo "##########################################################################################"
            echo "### Step 1 :: Configure SSH and rsync folders from tekton to the VM"
            echo "##########################################################################################"
            mkdir -p ~/.ssh
            if [ -e "/ssh/error" ]; then
              #no server could be provisioned
              cat /ssh/error
            exit 1
            elif [ -e "/ssh/otp" ]; then
              curl --cacert /ssh/otp-ca -XPOST -d @/ssh/otp $(cat /ssh/otp-server) >~/.ssh/id_rsa
              echo "" >> ~/.ssh/id_rsa
            else
              cp /ssh/id_rsa ~/.ssh
            fi
            chmod 0400 ~/.ssh/id_rsa

            export SSH_HOST=$(cat /ssh/host)
            export BUILD_DIR=$(cat /ssh/user-dir)
            export SSH_ARGS="-o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=10"

            echo "### Export different variables which are used within the script like args, repository to fetch, etc"
            export REPOSITORY_TO_FETCH=${REPOSITORY_TO_FETCH}
            export BUILD_ARGS="$@"

            ssh $SSH_ARGS "$SSH_HOST" mkdir -p "$BUILD_DIR/workspaces" "$BUILD_DIR/scripts" "$BUILD_DIR/volumes"

            export PORT_FORWARD=""
            export PODMAN_PORT_FORWARD=""

            echo "### rsync folders from pod to VM ..."
            rsync -ra $(workspaces.source.path)/ "$SSH_HOST:$BUILD_DIR/volumes/workdir/"
            rsync -ra "/shared/"                 "$SSH_HOST:$BUILD_DIR/volumes/shared/"
            rsync -ra "/tekton/results/"         "$SSH_HOST:$BUILD_DIR/results/"

            echo "##########################################################################################"
            echo "### Step 2 :: Create the bash script to be executed within the VM"
            echo "##########################################################################################"
            mkdir -p scripts

            cat >scripts/script-setup.sh <<'REMOTESSHEOF'
            #!/bin/sh

            echo "### Start podman.socket and show podman info ##"
            systemctl --user start podman.socket
            sleep 10s

            echo "## Podman version"
            podman version

            echo "## Podman info"
            podman info
            REMOTESSHEOF
            chmod +x scripts/script-setup.sh

            cat >scripts/script-build.sh <<'REMOTESSHEOF'
            #!/bin/sh

            echo "## Moving to the source directory"
            cd $(workspaces.source.path)
            ls -la

            echo "### Build the builder image using pack"
            for build_arg in "${BUILD_ARGS[@]}"; do
              PACK_ARGS+=" $build_arg"
            done

            echo "### Pack extra args: $PACK_ARGS"

            echo "### Execute: pack builder create ..."
            export DOCKER_HOST=unix:///workdir/podman.sock
            pack config experimental true

            echo "pack builder create ${IMAGE} --config builder.toml ${PACK_ARGS}"
            unshare -Uf $UNSHARE_ARGS --keep-caps -r --map-users 1,1,65536 --map-groups 1,1,65536 -w source -- \
              pack builder create ${IMAGE} --config builder.toml ${PACK_ARGS}

            BASE_IMAGE=$(tomljson source/builder.toml | jq '.stack."build-image"')
            podman inspect ${BASE_IMAGE} | jq -r '.[].Digest' > /shared/BASE_IMAGES_DIGESTS

            REMOTESSHEOF
            chmod +x scripts/script-build.sh

            cat >scripts/script-post-build.sh <<'REMOTESSHEOF'
            #!/bin/sh

            echo "###########################################################"

            echo "### Push the image produced and generate its digest: $IMAGE"
            podman push \
               --digestfile $BUILD_DIR/volumes/shared/IMAGE_DIGEST \
               "$IMAGE"

            echo "###########################################################"
            echo "### Export the image as OCI"
            podman push "${IMAGE}" "oci:$BUILD_DIR/volumes/shared/konflux-final-image:$IMAGE"
            echo "###########################################################"

            echo "###########################################################"
            echo "### Export: IMAGE_URL"
            echo "###########################################################"
            echo -n "$IMAGE" > $BUILD_DIR/volumes/shared/IMAGE_URL
            REMOTESSHEOF
            chmod +x scripts/script-post-build.sh

            echo "##########################################################################################"
            echo "### Step 3 :: Execute the bash script on the VM"
            echo "##########################################################################################"
            rsync -ra scripts "$SSH_HOST:$BUILD_DIR"
            rsync -ra "$HOME/.docker/" "$SSH_HOST:$BUILD_DIR/.docker/"

            echo "### Setup VM environment: podman, etc within the VM ..."
            ssh $SSH_ARGS "$SSH_HOST" scripts/script-setup.sh

            # Adding security-opt to by pass: dial unix /workdir/podman.sock: connect: permission denied
            ssh $SSH_ARGS "$SSH_HOST" $PORT_FORWARD podman run $PODMAN_PORT_FORWARD \
              -e REPOSITORY_TO_FETCH=${REPOSITORY_TO_FETCH} \
              -e BUILDER_IMAGE=$BUILDER_IMAGE \
              -e PLATFORM=$PLATFORM \
              -e IMAGE=$IMAGE \
              -e BUILD_ARGS=$BUILD_ARGS \
              -e BUILD_DIR=$BUILD_DIR \
              -v "$BUILD_DIR/volumes/workdir:$(workspaces.source.path):Z" \
              -v "$BUILD_DIR/volumes/shared:/shared:Z" \
              -v "$BUILD_DIR/.docker:/root/.docker:Z" \
              -v "$BUILD_DIR/scripts:/scripts:Z" \
              -v "/run/user/1001/podman/podman.sock:/workdir/podman.sock:Z" \
              --user=0 \
              --security-opt label=disable \
              --rm "$BUILDER_IMAGE" /scripts/script-build.sh "$@"

            echo "### Execute post build steps within the VM ..."
            ssh $SSH_ARGS "$SSH_HOST" \
              BUILD_DIR=$BUILD_DIR \
              IMAGE=$IMAGE \
              scripts/script-post-build.sh

            echo "### rsync folders from VM to pod"
            rsync -ra "$SSH_HOST:$BUILD_DIR/volumes/workdir/" "$(workspaces.source.path)/"
            rsync -ra "$SSH_HOST:$BUILD_DIR/volumes/shared/"  "/shared/"
            rsync -ra "$SSH_HOST:$BUILD_DIR/results/"         "/tekton/results/"
            
            echo "##########################################################################################"
            echo "Pull the image from the OCI storage
            echo "##########################################################################################"
            podman pull "oci:/shared/konflux-final-image:$IMAGE"
          securityContext:
            capabilities:
              add:
                - SETFCAP
          volumeMounts:
          - mountPath: "/ssh"
            name: "ssh"
            readOnly: true
          - mountPath: "/shared"
            name: "shared"
            readOnly: false
        - computeResources:
            limits:
              cpu: "2"
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 1Gi
          image: registry.access.redhat.com/rh-syft-tech-preview/syft-rhel9:1.4.1@sha256:34d7065427085a31dc4949bd283c001b91794d427e1e4cdf1b21ea4faf9fee3f
          name: sbom-syft-generate
          script: |
            #!/bin/bash
            set -e
            if [ "${IMAGE_APPEND_PLATFORM}" == "true" ]; then
              IMAGE="${IMAGE}-${PLATFORM//[^a-zA-Z0-9]/-}"
              export IMAGE
            fi
            echo "##########################################################################################"
            echo "### Running syft on the source directory"
            echo "##########################################################################################"
            syft dir:"$(workspaces.source.path)" --output cyclonedx-json="/shared/sbom-source.json"
            
            echo "##########################################################################################"
            echo "### Running syft on the image filesystem"
            echo "##########################################################################################"
            # syft dir:"$(cat /shared/container_path)" --output cyclonedx-json="/shared/sbom-image.json"
            syft scan oci-dir:/shared/konflux-final-image -o cyclonedx-json > /shared/sbom-image.json
            
            ls -la /shared/sbom-image.json
            ls -la /shared/sbom-source.json

          volumeMounts:
            - mountPath: /shared
              name: shared
        - computeResources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          image: quay.io/redhat-appstudio/sbom-utility-scripts-image@sha256:11851ba63f63dfdcf722e47993f41a1f5f31a7a0dc8aa85b810ce2466daf23af
          name: prepare-sboms
          script: |
            #!/bin/bash
            set -e
            if [ "${IMAGE_APPEND_PLATFORM}" == "true" ]; then
              IMAGE="${IMAGE}-${PLATFORM//[^a-zA-Z0-9]/-}"
              export IMAGE
            fi
            
            cd /shared
            
            echo "##########################################################################################"
            echo "## Merging contents of sbom-source.json and sbom-image.json into sbom-cyclonedx.json"
            echo "##########################################################################################"
            python3 /scripts/merge_syft_sboms.py

            if [ -f "sbom-cachi2.json" ]; then
              echo "##########################################################################################"
              echo "## Merging contents of sbom-cachi2.json into sbom-cyclonedx.json"
              echo "##########################################################################################"
              python3 /scripts/merge_cachi2_sboms.py sbom-cachi2.json sbom-cyclonedx.json >sbom-temp.json
              mv sbom-temp.json sbom-cyclonedx.json
            fi

            echo "##########################################################################################"
            echo "Creating sbom-purl.json"
            echo "##########################################################################################"
            python3 /scripts/create_purl_sbom.py

            # echo "##########################################################################################"
            # echo "Adding base images data to sbom-cyclonedx.json"
            # echo "##########################################################################################"
            # python3 /scripts/base_images_sbom_script.py \
            #   --sbom=sbom-cyclonedx.json \
            #   --base-images-from-dockerfile=/shared/base_images_from_dockerfile \
            #   --base-images-digests=/shared/base_images_digests
          securityContext:
            runAsUser: 0
          volumeMounts:
            - mountPath: /shared
              name: shared

        - computeResources:
            limits:
              cpu: "4"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 1Gi
          image: quay.io/konflux-ci/buildah-task:latest@sha256:b2d6c32d1e05e91920cd4475b2761d58bb7ee11ad5dff3ecb59831c7572b4d0c
          name: inject-sbom-and-push
          script: |
            #!/bin/bash
            set -e
            if [ "${IMAGE_APPEND_PLATFORM}" == "true" ]; then
              IMAGE="${IMAGE}-${PLATFORM//[^a-zA-Z0-9]/-}"
              export IMAGE
            fi

            retry() {
              status=-1
              max_run=5
              sleep_sec=10

              for run in $(seq 1 $max_run); do
                status=0
                [ "$run" -gt 1 ] && sleep $sleep_sec
                "$@" && break || status=$?
              done
              return $status
            }

            ca_bundle=/mnt/trusted-ca/ca-bundle.crt
            if [ -f "$ca_bundle" ]; then
              echo "INFO: Using mounted CA bundle: $ca_bundle"
              cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors
              update-ca-trust
            fi
            
            cd /shared

            echo "##########################################################################################"
            echo "## Get base_image_name, base_image_digest. CXopy within the container of the image the sbom"
            echo "##########################################################################################"
            base_image_name=$(buildah inspect --format '{{ index .ImageAnnotations "org.opencontainers.image.base.name"}}' $IMAGE | cut -f1 -d'@')
            base_image_digest=$(buildah inspect --format '{{ index .ImageAnnotations "org.opencontainers.image.base.digest"}}' $IMAGE)
            container=$(buildah from --pull-never $IMAGE)
            buildah copy $container sbom-cyclonedx.json sbom-purl.json /root/buildinfo/content_manifests/
            buildah config -a org.opencontainers.image.base.name=${base_image_name} -a org.opencontainers.image.base.digest=${base_image_digest} $container

            BUILDAH_ARGS=()
            if [ "${SQUASH}" == "true" ]; then
              BUILDAH_ARGS+=("--squash")
            fi

            buildah commit "${BUILDAH_ARGS[@]}" $container $IMAGE

            echo "##########################################################################################"
            echo "Pushing to ${IMAGE%:*}:${TASKRUN_NAME}"
            echo "##########################################################################################"
            if ! retry buildah push \
              --tls-verify="$TLSVERIFY" \
              "$IMAGE" \
              "docker://${IMAGE%:*}:$(context.taskRun.name)"; then
              echo "Failed to push sbom image to ${IMAGE%:*}:$(context.taskRun.name) after ${max_run} tries"
              exit 1
            fi

            echo "##########################################################################################"
            echo "Pushing to ${IMAGE}"
            echo "##########################################################################################"
            if ! retry buildah push \
              --tls-verify="$TLSVERIFY" \
              --digestfile "/shared/image-digest" "$IMAGE" \
              "docker://$IMAGE"; then
              echo "Failed to push sbom image to $IMAGE after ${max_run} tries"
              exit 1
            fi

            cat "/shared"/image-digest | tee $(results.IMAGE_DIGEST.path)
            echo -n "$IMAGE" | tee $(results.IMAGE_URL.path)
            {
              echo -n "${IMAGE}@"
              cat "/shared/image-digest"
            } >"$(results.IMAGE_REF.path)"

            # Remove tag from IMAGE while allowing registry to contain a port number.
            sbom_repo="${IMAGE%:*}"
            sbom_digest="$(sha256sum sbom-cyclonedx.json | cut -d' ' -f1)"
            # The SBOM_BLOB_URL is created by `cosign attach sbom`.
            echo -n "${sbom_repo}@sha256:${sbom_digest}" | tee "$(results.SBOM_BLOB_URL.path)"
          securityContext:
            capabilities:
              add:
                - SETFCAP
            runAsUser: 0
          volumeMounts:
            - mountPath: /var/lib/containers
              name: varlibcontainers
            - mountPath: /shared
              name: shared
        volumes:
        - name: "ssh"
          secret:
            secretName: "multi-platform-ssh-$(context.taskRun.name)"
        - name: "workdir"
          emptyDir: {}
        - name: "shared"
          emptyDir: {}
        - name: "varlibcontainers"
          emptyDir: {}
      workspaces:
      - name: "source"
        workspace: "workspace"
    - name: "build-image-index"
      params:
      - name: "IMAGE"
        value: "$(params.output-image)"
      - name: "COMMIT_SHA"
        value: "$(tasks.git-clone.results.commit)"
      - name: "IMAGE_EXPIRES_AFTER"
        value: "$(params.image-expires-after)"
      - name: "ALWAYS_BUILD_INDEX"
        value: "$(params.build-image-index)"
      - name: "IMAGES"
        value:
        - "$(tasks.build-container.results.IMAGE_URL)@$(tasks.build-container.results.IMAGE_DIGEST)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-build-image-index:0.1"
        - name: "name"
          value: "build-image-index"
        - name: "kind"
          value: "task"
        resolver: "bundles"
    - name: "source-build"
      params:
      - name: "BINARY_IMAGE"
        value: "$(params.output-image)"
      - name: "BASE_IMAGES"
        value: "$(tasks.build-container.results.BASE_IMAGES_DIGESTS)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-source-build:0.1"
        - name: "name"
          value: "source-build"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "workspace"
        workspace: "workspace"
    - name: "clair-scan"
      params:
      - name: "image-digest"
        value: "$(tasks.build-container.results.IMAGE_DIGEST)"
      - name: "image-url"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-clair-scan:0.1"
        - name: "name"
          value: "clair-scan"
        - name: "kind"
          value: "task"
        resolver: "bundles"
    - name: "ecosystem-cert-preflight-checks"
      params:
      - name: "image-url"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-ecosystem-cert-preflight-checks:0.1"
        - name: "name"
          value: "ecosystem-cert-preflight-checks"
        - name: "kind"
          value: "task"
        resolver: "bundles"
    - name: "sast-snyk-check"
      params:
      - name: "image-digest"
        value: "$(tasks.build-container.results.IMAGE_DIGEST)"
      - name: "image-url"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      runAfter:
      - "git-clone"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-sast-snyk-check:0.2"
        - name: "name"
          value: "sast-snyk-check"
        - name: "kind"
          value: "task"
        resolver: "bundles"
      workspaces:
      - name: "workspace"
        workspace: "workspace"
    - name: "clamav-scan"
      params:
      - name: "image-digest"
        value: "$(tasks.build-container.results.IMAGE_DIGEST)"
      - name: "image-url"
        value: "$(tasks.build-container.results.IMAGE_URL)"
      runAfter:
      - "build-container"
      taskRef:
        params:
        - name: "bundle"
          value: "quay.io/konflux-ci/tekton-catalog/task-clamav-scan:0.1"
        - name: "name"
          value: "clamav-scan"
        - name: "kind"
          value: "task"
        resolver: "bundles"
  timeouts:
    pipeline: "600000000000ns"
  workspaces:
  - name: "workspace"
    volumeClaimTemplate:
      apiVersion: "v1"
      kind: "PersistentVolumeClaim"
      spec:
        accessModes:
        - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"
  - name: "git-auth"
    secret:
      secretName: "{{ git_auth_secret }}"

